@using System.Globalization
@using WeazorLib
@using WeazorLib.Models
@inject Blazored.LocalStorage.ILocalStorageService localStore

<div class="widget">
		<div class="refreshed-text">Updated: @_refreshTime</div>
		<div class="unit-text" >
			Used units: 
			<button class="unit-group" @onclick="ChangeTemperatureUnits">
				@if(!_useFahrenheit)
				{
					<div class="chosen-unit">°C</div>
					<div class="not-chosen-unit"> | </div>
					<div class="not-chosen-unit">°F</div>
				}
				else
				{
					<div class="not-chosen-unit">°C</div>
					<div class="not-chosen-unit">  | </div>
					<div class="chosen-unit">°F</div>
				}
			</button>
		</div>
		<div class="location-text">
			<span class="oi oi-location" title="location" aria-hidden="true"></span>
			@Location.city, @Location.country_name  <button class="change-button" @onclick="ChangeLocation">Change</button>
		</div>
		<div class="temperature-main">
			@if(!_useFahrenheit) 
			{
				@(TemperatureConverter.ToCelsius((float)CurrentWeatherData.main.temp).ToString("N0")+"°C");
			}
			else
			{
				@(TemperatureConverter.ToFahrenheit((float)CurrentWeatherData.main.temp).ToString("N0")+"°F");
			}
			
		</div>
		<div class="temperature-feels-like">
			Feels like
			@if(!_useFahrenheit) 
			{
				@(TemperatureConverter.ToCelsius((float)CurrentWeatherData.main.feels_like).ToString("N0")+"°C. ");
			}
			else
			{
				@(TemperatureConverter.ToFahrenheit((float)CurrentWeatherData.main.feels_like).ToString("N0")+"°F. ");
			}
			@CurrentWeatherData.weather[0].main. 
		</div>
		<div class="additional-data-block">
			<br />Humidity: @CurrentWeatherData.main.humidity%
			<br />Pressure: @CurrentWeatherData.main.pressure hPa
			<br />Wind speed: @CurrentWeatherData.wind.speed m/s
			<br />Visibility: @ConvertToKm(@CurrentWeatherData.visibility).ToString("N1") km
		</div>

		<div class="forecast-header">Forecast for next 24 hours</div>
		<div class="hourly-forecast-block">
			@{
			DateTime zeroedDateTime=MakeMinutesAndSecondsZeroes(DateTime.Now);
			@for(int i = 0; i < 8; i++)
			{
				var data = ForecastData.list[i];
				<div class="hourly-column">
					<div class="hourly-text">@zeroedDateTime.AddHours(i*3).Hour:00</div>
					<div class="hourly-text">@data.weather[0].main</div>
					<div class="hourly-text-temperature">
					@if(!_useFahrenheit) 
					{
						@(TemperatureConverter.ToCelsius((float)data.main.temp).ToString("N0")+"°C");
					}
					else
					{
						@(TemperatureConverter.ToFahrenheit((float)data.main.temp).ToString("N0")+"°F");
					}
					</div>
				</div>
			}
			}
		</div>

		<div class="forecast-header">5 day forecast:</div>
		@{
			zeroedDateTime=MakeMinutesAndSecondsZeroes(DateTime.Now);
			var lastDay = zeroedDateTime.Day-1;
			
			@for (int i = 0; i < ForecastData.list.Count; i++)
			{
				
					var data = ForecastData.list[i];
					var localI = i; //interesting c# https://stackoverflow.com/questions/54812427/for-loop-not-returning-expected-value-c-sharp-blazor
					var time = @zeroedDateTime.AddHours(localI * 3f);
				
				if(lastDay != time.Day)
				{
					<div class="daily-date-header">@time.ToString("ddd", CultureInfo.InvariantCulture), @time.Day @time.ToString("MMM", CultureInfo.InvariantCulture)</div>
					lastDay=time.Day;
				}
				<div class="day-row">
					<div class="flex-column">@time.Hour:00</div>
					<div class="flex-column">@data.weather[0].main</div>
					<div class="flex-column">
					@if(!_useFahrenheit) 
					{
						@(TemperatureConverter.ToCelsius((float)data.main.temp).ToString("N0")+"°C");
					}
					else
					{
						@(TemperatureConverter.ToFahrenheit((float)data.main.temp).ToString("N0")+"°F");
					}
					
					</div>
				</div>
			}
		}
	</div>	
@code{
	[Parameter]
	public UserLocation Location { get; set; }
	[Parameter]
	public CurrentWeather CurrentWeatherData{ get; set; }
	[Parameter]
	public ForecastData ForecastData{ get; set; }
	[Parameter]
	public Action ChangeLocation { get; set;}

	private DateTime _refreshTime = DateTime.Now;

	private bool _useFahrenheit = false;
	private const string key = "weatherwidget-usefahrenheit";
	private async void OnInitializedAsync()
	{
		//Check local storage for preferences
		bool? localValue = await localStore.GetItemAsync<bool>(key);
		if (localValue is not null)
			_useFahrenheit = (bool)localValue;
		else
			await localStore.SetItemAsync<bool>(key, false);
	}

	private void ChangeTemperatureUnits()
	{
		_useFahrenheit = !_useFahrenheit;
	}

	private DateTime MakeMinutesAndSecondsZeroes(DateTime datetime)
	{
		return new DateTime(datetime.Year, datetime.Month, datetime.Day, datetime.Hour, 0, 0);
	}

	private float ConvertToKm(int m)
	{
		return m/1000f;
	}
}