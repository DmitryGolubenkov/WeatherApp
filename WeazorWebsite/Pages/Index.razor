@page "/"
@using System.Text.Json
@using System.Globalization
@using WeazorLib
@using WeazorLib.Models
@using WeazorWebsite.Components
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject Microsoft.Extensions.Configuration.IConfiguration config;

<div class="no-flex-grow flex-shrink w-100">
	@switch(appStatus)
	{
		case AppStatus.Loading:
			{
				<div style="position:absolute; top:50vh; width:100%; text-align:center">
					<p>
						<div class="wrapper">
							<span class="circle circle-1"></span>
							<span class="circle circle-2"></span>
							<span class="circle circle-3"></span>
							<span class="circle circle-4"></span>
						</div>
					</p>
				</div>
		}
			break;
		case AppStatus.NoLocation:
			{
				<div class="center-content">
				<PageBlock>
					<h2>Welcome!</h2>
				<p>To use the application, you need to set your location. Then we will be able to provide you with weather forecasts.</p>
				<p style="margin-bottom:2em;">We can try to determine your location automatically, or you can set it up manually.</p>
				<div class="center-content">
					<WeazorButton OnClick="AutoLocateAsync">Automatic Location</WeazorButton>
					<WeazorButton OnClick="ShowManualSelectionAsync" style="margin-left: 1em;">Manually select my location</WeazorButton>
				</div>
				</PageBlock>
				</div>
	}
			break;
			case AppStatus.AutoLocationError:
			{
				<h2>Location Error</h2>
				<p>We couldn't retrieve your location data for some reason. You can try again later or setup your location manually.</p>
				<WeazorButton OnClick="AutoLocateAsync">Automatic Location</WeazorButton>
				<WeazorButton OnClick="ShowManualSelectionAsync">Manually select my location</WeazorButton>
			}
			break;
		case AppStatus.ApiResponseError:
			{
				<h2>API Error</h2>
				<p>Sorry, we can't retrieve data from our API. Maybe, try again later?</p>
				<WeazorButton OnClick="GetForecastAsync">Refresh</WeazorButton>
			}
			break;
		case AppStatus.WeatherDataParseError:
			{
				<h2>Data Parse Error</h2>
				<p>Sorry, we can't parse data from our API. This needs to be fixed.</p>
				<button @onclick="GetForecastAsync">Refresh</button>
	}
			break;
		case AppStatus.Success:
			{
				<div class="w-100 justify-content-center">
				<div class="weather-app-content">
				@if(locationInfo is not null)
				{
					<LocationWidget City="@locationInfo.City" Country="@locationInfo.CountryName"></LocationWidget>
				}
				<PageBlock>



					<h3>@weather.TemperatureC.ToString("N0")°</h3>
					<h4>@weather.WeatherType</h4>
					<Separator />
					<h4>5 day forecast:</h4>
					@for (int i = 1; i <= 5; i++)
					{
						<div>
							<div>@DateOnly.FromDateTime(DateTime.Now.AddDays(i)).ToString()</div>
							<div>TODO</div>
						</div>
					}
				</PageBlock>
				</div>
				</div>
			}
			break;
	}


</div>

@code {
	private UserLocation? locationInfo;
	private JsonDocument? weatherData;
	private WeatherViewModel? weather;
	private AppStatus appStatus = AppStatus.Loading;

	private const string localStorageLocationName = "userLocation";

	protected override async Task OnInitializedAsync()
	{
		//Try to get location from local storage
		locationInfo = await localStore.GetItemAsync<UserLocation>(localStorageLocationName);
		if (locationInfo is not null)
		{
			await GetForecastAsync();
		}
		else
			appStatus = AppStatus.NoLocation;
	}

	private async Task AutoLocateAsync()
	{
		//Get location data from ipapi service in json format
		try
		{
			using var client = new HttpClient();
			var response = await client.GetFromJsonAsync<UserLocation>("https://ipapi.co/json/");
			
			locationInfo = response;
			await localStore.SetItemAsync<UserLocation>(localStorageLocationName, locationInfo);
			await GetForecastAsync();
		}
		catch (Exception e)
		{
			appStatus = AppStatus.AutoLocationError;
		}
	}

	private async Task ShowManualSelectionAsync()
	{
		
	}

	private async Task GetForecastAsync()
	{
		appStatus = AppStatus.Loading;

		//Get api url from config
		
		string weazorApiUrl = config.GetValue<string>("weazorApiUrl") + $"/GetCurrentWeather?cityName={locationInfo.City}&countryName={locationInfo.Country}";

		//Try to get forecast from API
		using HttpClient client = new HttpClient();
		var response = await client.GetAsync(weazorApiUrl);
		if(response is not null && response.IsSuccessStatusCode)
		{
			//Try to get weather data from response
			weatherData = await JsonDocument.ParseAsync(await response.Content.ReadAsStreamAsync());
			
			if (weatherData is not null) 
			{
				weather = ParseWeather();
				appStatus = AppStatus.Success;
			}
			else
				appStatus = AppStatus.WeatherDataParseError;
		}
		else
		{
			appStatus = AppStatus.ApiResponseError;
		}

	}
	///<summary>
	/// Method parses weatherData JSON and returns a WeatherViewModel object.
	///</summary>
	private WeatherViewModel ParseWeather()
	{
		WeatherViewModel weatherNew = new WeatherViewModel()
		{
			Temperature = float.Parse(weatherData.RootElement.GetProperty("main").GetProperty("temp").ToString(), CultureInfo.InvariantCulture.NumberFormat),
			WeatherType = weatherData.RootElement.GetProperty("weather").EnumerateArray().First().GetProperty("main").ToString()
		};

		return weatherNew;
	}
	public enum AppStatus
	{
		Success,
		ApiResponseError,
		NoLocation,
		WeatherDataParseError,
		Loading,
		ManualLocationSelection,
		AutoLocationError
	}
}