@page "/"
@using System.Text.Json
@using System.Globalization
@using Microsoft.Extensions.Configuration
@using WeazorLib
@using WeazorLib.Models
@using WeazorWebsite.Components
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject Microsoft.Extensions.Configuration.IConfiguration config;

<div class="no-flex-grow flex-shrink w-100 center-content">
	@switch(appStatus)
	{
		case AppStatus.Loading:
			{
				<div style="position:absolute; top:50vh; width:100%; text-align:center">
					<p>
						<div class="wrapper">
							<span class="circle circle-1"></span>
							<span class="circle circle-2"></span>
							<span class="circle circle-3"></span>
							<span class="circle circle-4"></span>
						</div>
					</p>
				</div>
			}
			break;
		case AppStatus.LocationSelection:
			{
				<div class="w-100 justify-content-center">
				<PageBlock>
					<div class="return-button" @onclick="Refresh">
						<span class="oi oi-chevron-left" title="Use existing data" aria-hidden="true"></span>
						Continue with @locationInfo.city, @locationInfo.country_name
						</div>
					<h2>Welcome!</h2>
					<p>To use the application, you need to set your location. Then we will be able to provide you with weather forecasts.</p>
					<p style="margin-bottom:2em;">We can try to determine your location automatically, or you can set it up manually.</p>
					<div class="center-content">
					<WeazorButton OnClick="AutoLocateAsync">Automatic Location</WeazorButton>
					<WeazorButton OnClick="ShowManualSelectionAsync" style="margin-left: 1em;">Manually select my location</WeazorButton>
				</div>
				</PageBlock>
				</div>
			}
			break;
			case AppStatus.AutoLocationError:
			{
				<div class="w-100 justify-content-center">
				<PageBlock>
				<h2>Location Error</h2>
				<p>We couldn't retrieve your location data for some reason. You can try again later or setup your location manually.</p>
				<div class="center-content">
				<WeazorButton OnClick="AutoLocateAsync">Automatic Location</WeazorButton>
				<WeazorButton OnClick="ShowManualSelectionAsync">Manually select my location</WeazorButton>
				</div>
				</PageBlock>
				</div>
	}
			break;
			case AppStatus.ManualLocationSelection:
			{
				<PageBlock>
				if(locationInfo is not null)
				{
					<div class="return-button" @onclick="Refresh">
					<span class="oi oi-chevron-left" title="Use existing data" aria-hidden="true"></span>
						Continue with @locationInfo.city, @locationInfo.country_name
					</div>

					<div>Location Selection</div>
					<p>Use the fields below to choose your city.</p>
					<div></div>
					<div></div>
				</PageBlock>
			}
			break;
		case AppStatus.Error:
			{
				<div class="w-75 justify-content-center">
				<h2>API Error</h2>
				<p>There was an error while processing your request. Please, try again later.</p>
				<WeazorButton OnClick="Refresh">Refresh</WeazorButton>
				</div>
			}
			break;
		case AppStatus.Success:
			{
				<WeatherWidget Location="locationInfo" CurrentWeatherData="@weatherData" ForecastData="@forecast" ChangeLocation="ChangeLocation"></WeatherWidget>
			}
			break;
	}
</div>



@code {
	private UserLocation? locationInfo;
	private CurrentWeather? weatherData;
	private ForecastData? forecast;
	private AppStatus appStatus = AppStatus.Loading;
	private const string localStorageLocationName = "userLocation";

	protected override async Task OnInitializedAsync()
	{
		//Try to get location from local storage
		locationInfo = await localStore.GetItemAsync<UserLocation>(localStorageLocationName);

		if (locationInfo is not null)
		{
			await Refresh();
		}
		else
			appStatus = AppStatus.LocationSelection;
	}

	private async Task AutoLocateAsync()
	{
		//Get location data from ipapi service in json format
		try
		{
			using var client = new HttpClient();
			var response = await client.GetFromJsonAsync<UserLocation>("https://ipapi.co/json/");
			
			locationInfo = response;
			await localStore.SetItemAsync<UserLocation>(localStorageLocationName, locationInfo);
		}
		catch (Exception e)
		{
			appStatus = AppStatus.AutoLocationError;
		}
		if(locationInfo is not null)
			await Refresh();
	}

	private async Task ShowManualSelectionAsync()
	{
		appStatus = AppStatus.ManualLocationSelection;
	}

	private async Task<bool> GetCurrentWeatherAsync()
	{
		//Get api url from config
		string weazorApiUrl = config.GetValue<string>("weazorApiUrl") + $"/GetCurrentWeather?cityName={locationInfo.city}&countryName={locationInfo.country}";

		//Try to get forecast from API
		using HttpClient client = new HttpClient();
		try
		{
			weatherData = await client.GetFromJsonAsync<CurrentWeather>(weazorApiUrl);
			return true;
		}
		catch
		{
			return false;
		}
	}

	private async Task<bool> Get5DayForecastDataAsync() {
		string weazorApiUrl = config.GetValue<string>("weazorApiUrl") + $"/Get5DaysForecast?cityName={locationInfo.city}&countryName={locationInfo.country}";

		using HttpClient client = new HttpClient();
		try 
		{
			forecast = await client.GetFromJsonAsync<ForecastData>(weazorApiUrl);
				return true;
		} 
		catch
		{
			return false;
		}
	}

	private async Task Refresh()
	{
		appStatus = AppStatus.Loading;
		if(await GetCurrentWeatherAsync() && await Get5DayForecastDataAsync()) 
		{
			appStatus = AppStatus.Success;
		}
		else
			appStatus = AppStatus.Error;		
	}

	private void ChangeLocation()
	{
		appStatus = AppStatus.LocationSelection;
	}

	public enum AppStatus
	{
		Success,
		LocationSelection,
		Loading,
		ManualLocationSelection,
		AutoLocationError,
		Error
	}
}